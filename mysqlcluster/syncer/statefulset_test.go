/*
Copyright 2021 RadonDB.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package syncer

import (
	"reflect"
	"testing"

	"github.com/agiledragon/gomonkey/v2"
	"github.com/radondb/radondb-mysql-kubernetes/api/v1alpha1"
	"github.com/radondb/radondb-mysql-kubernetes/mysqlcluster"
	"github.com/radondb/radondb-mysql-kubernetes/mysqlcluster/container"
	appsv1 "k8s.io/api/apps/v1"
	corev1 "k8s.io/api/core/v1"
)

func TestStatefulSetSyncer_ensurePodSpec(t *testing.T) {
	type fields struct {
		MysqlCluster *mysqlcluster.MysqlCluster
		sfs          *appsv1.StatefulSet
	}
	cluster := mysqlcluster.New(&v1alpha1.MysqlCluster{})
	enabledSlowLogCluster := mysqlcluster.New(&v1alpha1.MysqlCluster{
		Spec: v1alpha1.MysqlClusterSpec{
			PodPolicy: v1alpha1.PodPolicy{
				SlowLogTail: true,
			},
		},
	})
	enabledAuditLogCluster := mysqlcluster.New(&v1alpha1.MysqlCluster{
		Spec: v1alpha1.MysqlClusterSpec{
			PodPolicy: v1alpha1.PodPolicy{
				AuditLogTail: true,
			},
		},
	})
	emptySfs := &appsv1.StatefulSet{
		Spec: appsv1.StatefulSetSpec{
			Template: corev1.PodTemplateSpec{
				Spec: corev1.PodSpec{
					Containers: []corev1.Container{},
				},
			},
		},
	}
	initTests := []struct {
		name           string
		fields         fields
		wantContainers []string
	}{
		{
			name: "basic",
			fields: fields{
				MysqlCluster: cluster,
				sfs:          emptySfs,
			},
			wantContainers: []string{"mysql", "xenon", "backup"},
		},
		{
			name: "enable slow log",
			fields: fields{
				MysqlCluster: enabledSlowLogCluster,
				sfs:          emptySfs,
			},
			wantContainers: []string{"mysql", "xenon", "backup", "slowlog"},
		},
		{
			name: "enable audit log",
			fields: fields{
				MysqlCluster: enabledAuditLogCluster,
				sfs:          emptySfs,
			},
			wantContainers: []string{"mysql", "xenon", "backup", "auditlog"},
		},
	}

	existSfs := &appsv1.StatefulSet{
		Spec: appsv1.StatefulSetSpec{
			Template: corev1.PodTemplateSpec{
				Spec: corev1.PodSpec{
					Containers: []corev1.Container{
						{
							Name:  "mysql",
							Image: "mysql",
						},
						{
							Name:  "xenon",
							Image: "xenon",
						},
						{
							Name:  "backup",
							Image: "backup",
						},
					},
				},
			},
		},
	}
	updateTests := []struct {
		name           string
		fields         fields
		wantContainers []corev1.Container
	}{
		{
			name: "update basic containers",
			fields: fields{
				MysqlCluster: cluster,
				sfs:          existSfs,
			},
			// Use the existence value, not the value generated by EnsureContainer().
			wantContainers: []corev1.Container{
				{
					Name:  "mysql",
					Image: "mysql",
				},
				{
					Name:  "xenon",
					Image: "xenon",
				},
				{
					Name:  "backup",
					Image: "backup",
				},
			},
		},
	}

	// Sfs does not exist(init)
	for _, tt := range initTests {
		patch := gomonkey.ApplyFunc(container.EnsureContainer, func(name string, c *mysqlcluster.MysqlCluster) corev1.Container {
			return corev1.Container{Name: name}
		})
		defer patch.Reset()
		t.Run(tt.name, func(t *testing.T) {
			s := &StatefulSetSyncer{
				MysqlCluster: tt.fields.MysqlCluster,
				sfs:          tt.fields.sfs,
			}
			containers := []string{}
			for _, c := range s.ensurePodSpec().Containers {
				containers = append(containers, c.Name)
			}
			if !reflect.DeepEqual(containers, tt.wantContainers) {
				t.Errorf("StatefulSetSyncer.ensurePodSpec() = %v, want %v", containers, tt.wantContainers)
			}
		})
	}
	// Sfs exists(update)
	for _, tt := range updateTests {
		patch := gomonkey.ApplyFunc(container.EnsureContainer, func(name string, c *mysqlcluster.MysqlCluster) corev1.Container {
			return corev1.Container{Name: name + "test", Image: "test"}
		})
		defer patch.Reset()
		t.Run(tt.name, func(t *testing.T) {
			s := &StatefulSetSyncer{
				MysqlCluster: tt.fields.MysqlCluster,
				sfs:          tt.fields.sfs,
			}
			containers := s.ensurePodSpec().Containers
			if !reflect.DeepEqual(containers, tt.wantContainers) {
				t.Errorf("StatefulSetSyncer.ensurePodSpec() = %v, want %v", containers, tt.wantContainers)
			}
		})
	}

}
